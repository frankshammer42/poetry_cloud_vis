{"version":3,"sources":["../../js/cloud_visualization.js"],"names":["container","stats","camera","scene","renderer","maxParticleCount","r","rHalf","offset","particles_counts","particles_point_clouds","particles_positions","particles_data","clouds_points_connections","lines_positions","lines_colors","character_groups","init","animate","get_character","query_info","index","console","log","character_query","use_name","name","id","flattend_particle_positions","particleCount","current_group","linePositions","lineColors","linesMesh","particles","particlePositions","particlesData","pointCloud","request","XMLHttpRequest","open","send","status","JSON","parse","responseText","data","inks","length","push","THREE","Group","add","segments","Float32Array","pMaterial","PointsMaterial","color","size","blending","AdditiveBlending","transparent","sizeAttenuation","BufferGeometry","i","y","x","z","velocity","Vector3","Math","random","numConnections","setDrawRange","addAttribute","BufferAttribute","setDynamic","computeBoundingSphere","Points","geometry","material","LineBasicMaterial","vertexColors","VertexColors","LineSegments","update_character","vertexpos","colorpos","numConnected","particleData","j","particleDataB","dx","dy","dz","dist","sqrt","threshold","alpha","attributes","position","needsUpdate","document","getElementById","PerspectiveCamera","window","innerWidth","innerHeight","controls","OrbitControls","Scene","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","gammaInput","gammaOutput","appendChild","domElement","Stats","dom","addEventListener","onWindowResize","aspect","updateProjectionMatrix","requestAnimationFrame","update","render","time","Date","now"],"mappings":"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","file":"cloud_visualization.js","sourcesContent":["//Set Up Variables\nlet container, stats;\nlet camera, scene, renderer;\nlet maxParticleCount = 300;\nlet r = 200;\nlet rHalf = r / 2;\nlet offset = 100;\n//Group Variables\nlet particles_counts = [];\nlet particles_point_clouds = []; //Particles geometries for characters\nlet particles_positions = []; //to get and update positions for particles\nlet particles_data = []; //to store speed connections and maybe other things for runtime\nlet clouds_points_connections = []; //Line geometries for characters\nlet lines_positions = []; //to get and update positions for lines\nlet lines_colors = []; //to get and update colors alpha for lines\nlet character_groups = []; //Groups collectives for easy manipulation\n\n//Main Loop\ninit();\nanimate();\n\n\n//Index is for applying offset to display on screen\nfunction get_character(query_info, index){\n    console.log(\"Start Getting character from database\");\n    let character_query = \"\";\n    if (query_info.use_name){\n        character_query = 'http://localhost:3000/api/characters/name/'+ query_info.name;\n    }\n    else{\n        character_query = 'http://localhost:3000/api/characters/id/'+ query_info.id;\n    }\n    \"use strict\";\n    let flattend_particle_positions;\n    let particleCount;\n    let current_group;\n    let linePositions;\n    let lineColors;\n    let linesMesh;\n    let particles;\n    let particlePositions;\n    let particlesData = [];\n    let pointCloud; //current point cloud for the character\n\n    let request = new XMLHttpRequest();\n    request.open('GET', character_query, false);  // `false` makes the request synchronous\n    request.send(null);\n\n    if (request.status === 200) {\n        flattend_particle_positions = JSON.parse(request.responseText).data.inks;\n    }\n\n    particleCount = flattend_particle_positions.length / 3;\n    particles_counts.push(particleCount);\n\n    current_group = new THREE.Group();\n    scene.add( current_group );\n\n    let segments = maxParticleCount * maxParticleCount;\n\n    linePositions = new Float32Array( segments * 3 );\n    lineColors = new Float32Array( segments * 3 );\n\n    let pMaterial = new THREE.PointsMaterial( {\n        color: 0x000000,\n        size: 3,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        sizeAttenuation: false\n    } );\n\n    particles = new THREE.BufferGeometry();\n    // Previously it is the maxParticleCount\n    particlePositions = new Float32Array( particleCount * 3 );\n\n    // Previously it is the max particle count\n    for ( let i = 0; i < particleCount; i++ ) {\n\n        //TODO: Modify the server side to account for parametric difference\n        let y = 100 - flattend_particle_positions[i * 3];\n        let x = flattend_particle_positions[i * 3 + 1] + index*offset;\n        let z = flattend_particle_positions[i * 3 + 2];\n        particlePositions[ i * 3     ] = x;\n        particlePositions[ i * 3 + 1 ] = y;\n        particlePositions[ i * 3 + 2 ] = z;\n    }\n    particles_positions.push(particlePositions);\n\n\n    for (let i=0; i < particleCount; i++){\n        particlesData.push( {\n            // velocity: new THREE.Vector3( -1 + Math.random() * 2, -1 + Math.random() * 2,  -1 + Math.random() * 2 ),\n            // velocity: new THREE.Vector3(0, 0, 0),\n            velocity: new THREE.Vector3(0, 0,  (-1 + Math.random() * 2) * 0.2),\n            numConnections: 0\n        } );\n    }\n    particles_data.push(particlesData);\n\n\n    particles.setDrawRange( 0, particleCount);\n    particles.addAttribute( 'position', new THREE.BufferAttribute(particlePositions, 3 ).setDynamic( true ) );\n    particles.computeBoundingSphere();\n    // create the particle system\n    pointCloud = new THREE.Points( particles, pMaterial );\n    particles_point_clouds.push(pointCloud);\n    current_group.add( pointCloud );\n    // let  axesHelper = new THREE.AxesHelper( 100 );\n    // group.add( axesHelper );\n\n    lines_positions.push(linePositions);\n    lines_colors.push(lineColors);\n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute( 'position', new THREE.BufferAttribute( linePositions, 3 ).setDynamic( true ) );\n    geometry.addAttribute( 'color', new THREE.BufferAttribute( lineColors, 3 ).setDynamic( true ) );\n    geometry.computeBoundingSphere();\n    geometry.setDrawRange( 0, 0 );\n    let material = new THREE.LineBasicMaterial( {\n        vertexColors: THREE.VertexColors,\n        blending: THREE.AdditiveBlending,\n        transparent: true\n    } );\n    linesMesh = new THREE.LineSegments( geometry, material );\n    clouds_points_connections.push(linesMesh);\n    current_group.add( linesMesh );\n    character_groups.push(current_group);\n}\n\n\n//Helper function for animation\nfunction update_character(index){\n    \"use strict\";\n    let vertexpos = 0;\n    let colorpos = 0;\n    let numConnected = 0;\n    let particlesData = particles_data[index];\n    let particlePositions = particles_positions[index];\n    let linePositions = lines_positions[index];\n    let lineColors = lines_colors[index];\n    let particleCount = particles_counts[index];\n\n\n    for ( let i = 0; i < particleCount; i++ )\n        particlesData[ i ].numConnections = 0;\n\n    for ( let i = 0; i < particleCount; i++ ) {\n\n        // get the particle\n        let particleData = particlesData[i];\n\n        particlePositions[ i * 3     ] += particleData.velocity.x;\n        particlePositions[ i * 3 + 1 ] += particleData.velocity.y;\n        particlePositions[ i * 3 + 2 ] += particleData.velocity.z;\n\n        if ( particlePositions[ i * 3 + 1 ] < -rHalf || particlePositions[ i * 3 + 1 ]- index * offset > rHalf)\n            particleData.velocity.y = -particleData.velocity.y;\n\n        if ( particlePositions[ i * 3 ] - index * offset < -rHalf || particlePositions[ i * 3 ]- index * offset > rHalf )\n            particleData.velocity.x = -particleData.velocity.x;\n\n        if ( particlePositions[ i * 3 + 2 ] < -rHalf || particlePositions[ i * 3 + 2 ] > rHalf )\n            particleData.velocity.z = -particleData.velocity.z;\n\n\n        // Check collision\n        for ( let j = i + 1; j < particleCount; j++ ) {\n\n            let particleDataB = particlesData[ j ];\n\n            let dx = particlePositions[ i * 3     ] - particlePositions[ j * 3     ];\n            let dy = particlePositions[ i * 3 + 1 ] - particlePositions[ j * 3 + 1 ];\n            let dz = particlePositions[ i * 3 + 2 ] - particlePositions[ j * 3 + 2 ];\n            let dist = Math.sqrt( dx * dx + dy * dy + dz * dz );\n\n            let threshold = 15;\n            if ( dist < threshold) {\n\n                particleData.numConnections++;\n                particleDataB.numConnections++;\n\n                let alpha = 1.0 - (dist / threshold);\n\n                linePositions[ vertexpos++ ] = particlePositions[ i * 3     ];\n                linePositions[ vertexpos++ ] = particlePositions[ i * 3 + 1 ];\n                linePositions[ vertexpos++ ] = particlePositions[ i * 3 + 2 ];\n\n                linePositions[ vertexpos++ ] = particlePositions[ j * 3     ];\n                linePositions[ vertexpos++ ] = particlePositions[ j * 3 + 1 ];\n                linePositions[ vertexpos++ ] = particlePositions[ j * 3 + 2 ];\n\n                lineColors[ colorpos++ ] = alpha;\n                lineColors[ colorpos++ ] = alpha;\n                lineColors[ colorpos++ ] = alpha;\n\n                lineColors[ colorpos++ ] = alpha;\n                lineColors[ colorpos++ ] = alpha;\n                lineColors[ colorpos++ ] = alpha;\n\n                numConnected++;\n            }\n        }\n    }\n    clouds_points_connections[index].geometry.setDrawRange( 0, numConnected * 2 );\n    clouds_points_connections[index].geometry.attributes.position.needsUpdate = true;\n    clouds_points_connections[index].geometry.attributes.color.needsUpdate = true;\n    particles_point_clouds[index].geometry.attributes.position.needsUpdate = true;\n\n}\n\n\n\nfunction init() {\n    container = document.getElementById( 'container' );\n    camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 4000 );\n    // camera.position.z = 1750;\n    camera.position.z = 500;\n\n    let controls = new THREE.OrbitControls( camera, container );\n\n    scene = new THREE.Scene();\n    for (let i=169; i<176; i++){\n        let query_info= {use_name: false, name: \"\", id: i};\n        get_character(query_info, i-169);\n    }\n\n\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n\n    container.appendChild( renderer.domElement );\n\n    stats = new Stats();\n    container.appendChild( stats.dom );\n\n    window.addEventListener( 'resize', onWindowResize, false );\n}\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n}\n\nfunction animate() {\n    for (let i=0; i<7; i++){\n        update_character(i);\n    }\n    requestAnimationFrame( animate );\n    stats.update();\n    render();\n}\n\nfunction render() {\n\n    let time = Date.now() * 0.001;\n\n    // group.rotation.y = time * 0.1;\n    renderer.render( scene, camera );\n\n}\n\n"]}